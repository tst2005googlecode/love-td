local MAP_SCAN_DIR = 'maps_local/'--[[    love-td Map Editor    main.lua            * DEVELOPERS:   Joachim Andersen--]]local PROJECT_FILES = {'gui','utility/utility_string'}WIN_W, WIN_H = 800, 600--[[    Game callback handlers    --]]local t_Callbacks = {    ['focus'] =         {},    ['keypressed'] =    {},    ['keyreleased'] =   {},    ['mousefocus'] =    {},    ['mousepressed'] =  {},    ['mousereleased'] = {},    ['textinput'] =     {},    ['threaderror'] =   {},    ['visible'] =       {},    ['update'] =        {},    ['draw'] =          {}}for strCallback in pairs (t_Callbacks) do    love[strCallback] = function (...)        for _,strCallbackFunc in ipairs (t_Callbacks[strCallback]) do            _G[strCallbackFunc](...)        end    endendfunction registerGameCallbackFunc (strCallback, strFunc)    return table.insert (t_Callbacks[strCallback], strFunc)endfunction deregisterGameCallbackFunc (strCallback, strFunc)    for k,strCallbackFunc in ipairs (t_Callbacks[strCallback]) do        return table.remove (t_Callbacks[strCallback], k)    endend--[[    Map editor    --]]local t_EditorData = {}local t_Maps = {}local THUMBNAIL_SCALE = 0.15local THUMBNAIL_SIZE = THUMBNAIL_SCALE * 800function love.load ()        love.filesystem.createDirectory (MAP_SCAN_DIR)        for i,file in ipairs (PROJECT_FILES) do        require (file)    end        love.graphics.setBackgroundColor (102, 102, 102)        for _,strFile in ipairs (love.filesystem.getDirectoryItems(MAP_SCAN_DIR)) do        if (strFile:sub(#strFile-3, #strFile) == '.png') then            local image = love.graphics.newImage (MAP_SCAN_DIR .. strFile)            if (image) then                table.insert (t_Maps, {name = strFile, src = image})            end        end    end        local menu = {} -- Array containing GUI elements only    for i,t_Map in ipairs (t_Maps) do        local GUIImage = gui.createImage (0, 0, t_Map.src)        GUIImage:setScale (THUMBNAIL_SCALE, THUMBNAIL_SCALE)                local intY = 150        if (i > 4) then            intY = 280            i = i - 4        end                GUIImage.fileName = t_Map.name        GUIImage.oX, GUIImage.oY = THUMBNAIL_SIZE + THUMBNAIL_SIZE*(i-1) + 60*(i-1), intY        GUIImage:center (GUIImage.oX, GUIImage.oY)        GUIImage:setHoverHandler ('onThumbnailMouseEnter', 'onThumbnailMouseExit')        GUIImage:setClickHandler ('onThumbnailClick')        table.insert (menu, GUIImage)    end    t_EditorData.menu = menu        return trueendfunction onThumbnailMouseEnter (GUIImage)    GUIImage:setScale (THUMBNAIL_SCALE + 0.02, THUMBNAIL_SCALE + 0.02)    GUIImage:center (GUIImage.oX, GUIImage.oY)endfunction onThumbnailMouseExit (GUIImage)    GUIImage:setScale (THUMBNAIL_SCALE, THUMBNAIL_SCALE)    GUIImage:center (GUIImage.oX, GUIImage.oY)endfunction onThumbnailClick (GUIImage)    local strMapFileName = GUIImage.fileName    for _,GUIObj in ipairs (t_EditorData.menu) do GUIObj:destroy () end    t_EditorData.menu = nil    local bgImage = love.graphics.newImage (MAP_SCAN_DIR .. strMapFileName)    t_EditorData.bg = gui.createImage (0, 0, bgImage)        --[[            Toolbox        --]]        local toolBox = {active = true, gui = {}}    local intW, intH = WIN_W, 125    local intX, intY = 0, WIN_H - intH        local GUIRect = gui.createRectangle ('fill', intX, intY, intW, intH, {0, 0, 0, 100})    GUIRect.oX, GUIRect.oY = intX, intY    table.insert (toolBox.gui, GUIRect)        local GUILabel = gui.createLabel        t_EditorData.toolBox = toolBox    registerGameCallbackFunc ('keypressed', 'onKeyPressed')endfunction onKeyPressed (strKey)    -- Toggle toolbox    if (strKey == 'lctrl') then        if (not t_EditorData.toolBox.active) then            for _,GUIObj in ipairs (t_EditorData.toolBox.gui) do                GUIObj:setPosition (GUIObj.oX, GUIObj.oY)            end            t_EditorData.toolBox.active = true        else            for _,GUIObj in ipairs (t_EditorData.toolBox.gui) do                GUIObj:setPosition (GUIObj.oX, WIN_H + 125)            end            t_EditorData.toolBox.active = false        end    endend